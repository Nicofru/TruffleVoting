{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","winningProposalId","workflow","whitelist","proposals","formProposal","formAddress","formVote","owner","formError","componentDidMount","eth","getAccounts","net","getId","networkId","deployedNetwork","VotingContract","networks","Contract","abi","address","on","setState","runInit","alert","error","methods","getAddresses","call","getProposals","getWorkflow","getWinningProposalId","parseInt","events","VoterRegistered","event","handleEventVoterRegistered","ProposalRegistered","handleEventProposalRegistered","Voted","handleEventVoted","WorkflowStatusChange","handleEventWorkflowStatusChange","handleSubmitTallyVotes","preventDefault","tallyVotes","send","from","handleSubmitEndVotingSession","endVotingSession","updatedProposals","returnValues","voteCount","handleSubmitRegisterVote","vote","registerVote","message","handleSubmitStartVotingSession","startVotingSession","handleSubmitEndProposalsRegistration","endProposalsRegistration","handleSubmitRegisterProposal","proposal","registerProposal","newWorkflow","handleSubmitStartProposalsRegistration","startProposalsRegistration","updatedWhitelist","push","handleSubmitVoterRegistered","addToWhitelist","this","className","style","display","justifyContent","Card","width","Header","Body","ListGroup","variant","Item","Table","striped","bordered","hover","map","Form","Group","Control","placeholder","isInvalid","Boolean","onChange","e","target","value","type","Feedback","Label","float","defaultValue","as","disabled","hidden","Button","onClick","key","index","description","Component","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6ziYAqCeA,EAnCC,kBACd,IAAIC,SAAQ,SAACC,EAASC,GAEpBC,OAAOC,iBAAiB,OAAxB,sBAAgC,kCAAAC,EAAA,0DAE1BF,OAAOG,SAFmB,wBAGtBC,EAAO,IAAIC,IAAKL,OAAOG,UAHD,kBAMpBH,OAAOG,SAASG,SANI,OAQ1BR,EAAQM,GARkB,gDAU1BL,EAAO,EAAD,IAVoB,gCAcrBC,OAAOI,MAERA,EAAOJ,OAAOI,KACpBG,QAAQC,IAAI,2BACZV,EAAQM,KAIFK,EAAW,IAAIJ,IAAKK,UAAUC,aAClC,yBAEIP,EAAO,IAAIC,IAAKI,GACtBF,QAAQC,IAAI,gDACZV,EAAQM,IA3BoB,8D,gDC4YrBQ,G,kNAzYbC,MAAQ,CACNT,KAAM,KACNU,SAAU,KACVC,SAAU,KACVC,kBAAmB,KACnBC,SAAU,EACVC,UAAW,GACXC,UAAW,GACXC,aAAc,KACdC,YAAa,KACbC,SAAU,KACVC,MAAO,KACPC,UAAW,M,EAGbC,kB,sBAAoB,oCAAAvB,EAAA,+EAEGN,IAFH,cAEVQ,EAFU,gBAGOA,EAAKsB,IAAIC,cAHhB,cAGVb,EAHU,gBAIQV,EAAKsB,IAAIE,IAAIC,QAJrB,OAIVC,EAJU,OAKVC,EAAkBC,EAAeC,SAASH,GAE1Cf,EAAW,IAAIX,EAAKsB,IAAIQ,SAC5BF,EAAeG,IACfJ,GAAmBA,EAAgBK,SAGrCpC,OAAOG,SAASkC,GAAG,kBAAnB,sBAAsC,4BAAAnC,EAAA,sEACbE,EAAKsB,IAAIC,cADI,OAC9Bb,EAD8B,OAEpC,EAAKwB,SAAS,CAACxB,aAFqB,4CAKtC,EAAKwB,SAAS,CAAElC,OAAMU,WAAUC,YAAY,EAAKwB,SAjBjC,kDAmBhBC,MAAM,0EACNjC,QAAQkC,MAAR,MApBgB,0D,EAwBpBF,Q,sBAAU,sCAAArC,EAAA,6DACAa,EAAa,EAAKF,MAAlBE,SADA,SAGgBA,EAAS2B,QAAQC,eAAeC,OAHhD,cAGF1B,EAHE,gBAIgBH,EAAS2B,QAAQG,eAAeD,OAJhD,cAIFzB,EAJE,gBAKeJ,EAAS2B,QAAQI,cAAcF,OAL9C,cAKF3B,EALE,iBAMwBF,EAAS2B,QAAQK,uBAAuBH,OANhE,eAMF5B,EANE,iBAOYD,EAAS2B,QAAQnB,QAAQqB,OAPrC,QAOFrB,EAPE,OASR,EAAKe,SAAS,CAACpB,YAAWD,SAAU+B,SAAS/B,GAAWD,oBAAmBO,QAAOJ,cAElFJ,EAASkC,OAAOC,kBAAkBb,GAAG,QAAQ,SAACc,GAAD,OAAW,EAAKC,2BAA2BD,MAAQd,GAAG,QAAS9B,QAAQkC,OACpH1B,EAASkC,OAAOI,qBAAqBhB,GAAG,QAAQ,SAACc,GAAD,OAAW,EAAKG,8BAA8BH,MAAQd,GAAG,QAAS9B,QAAQkC,OAC1H1B,EAASkC,OAAOM,QAAQlB,GAAG,QAAQ,SAACc,GAAD,OAAW,EAAKK,iBAAiBL,MAAQd,GAAG,QAAS9B,QAAQkC,OAChG1B,EAASkC,OAAOQ,uBAAuBpB,GAAG,QAAQ,SAACc,GAAD,OAAW,EAAKO,gCAAgCP,MAAQd,GAAG,QAAS9B,QAAQkC,OAdtH,4C,EAiBVkB,uB,uCAAyB,WAAMR,GAAN,qBAAAjD,EAAA,6DACvBiD,EAAMS,iBADiB,EAEQ,EAAK/C,MAA5BC,EAFe,EAEfA,SAAUC,EAFK,EAELA,SAFK,SAGSA,EAAS2B,QAAQK,uBAAuBH,OAHjD,cAGjB5B,EAHiB,OAKvB,EAAKsB,SAAS,CAAEtB,sBALO,SAMjBD,EAAS2B,QAAQmB,aAAaC,KAAK,CAACC,KAAMjD,EAAS,KANlC,2C,wDASzBkD,6B,uCAA+B,WAAMb,GAAN,mBAAAjD,EAAA,6DAC7BiD,EAAMS,iBADuB,EAEE,EAAK/C,MAA5BC,EAFqB,EAErBA,SAAUC,EAFW,EAEXA,SAFW,SAIvBA,EAAS2B,QAAQuB,mBAAmBH,KAAK,CAACC,KAAMjD,EAAS,KAJlC,2C,wDAO/B0C,iB,uCAAmB,WAAOL,GAAP,iBAAAjD,EAAA,sDACTiB,EAAc,EAAKN,MAAnBM,WACF+C,EAAmB/C,GACRgC,EAAMgB,aAAa,IAAIC,UAAYpB,SAASkB,EAAiBf,EAAMgB,aAAa,IAAIC,WAAa,EAElH,EAAK9B,SAAS,CAAEnB,UAAW+C,IALV,2C,wDAQnBG,yB,uCAA2B,WAAOlB,GAAP,qBAAAjD,EAAA,6DACzBiD,EAAMS,iBADmB,EAEM,EAAK/C,MAA5BC,EAFiB,EAEjBA,SAAUC,EAFO,EAEPA,SACZuD,EAAOtB,SAAS,EAAKnC,MAAMS,UAHR,SAMvB,EAAKgB,SAAS,CAAEd,UAAW,OANJ,SAOjBT,EAAS2B,QAAQ6B,aAAaD,GAAMR,KAAK,CAACC,KAAMjD,EAAS,KAPxC,uDASvBP,QAAQkC,MAAM,KAAM+B,SACpB,EAAKlC,SAAS,CAAEd,UAAW,KAAMgD,UAVV,yD,wDAc3BC,+B,uCAAiC,WAAOtB,GAAP,mBAAAjD,EAAA,6DAC/BiD,EAAMS,iBADyB,EAEA,EAAK/C,MAA5BC,EAFuB,EAEvBA,SAAUC,EAFa,EAEbA,SAFa,SAIzBA,EAAS2B,QAAQgC,qBAAqBZ,KAAK,CAACC,KAAMjD,EAAS,KAJlC,2C,wDAOjC6D,qC,uCAAuC,WAAMxB,GAAN,mBAAAjD,EAAA,6DACrCiD,EAAMS,iBAD+B,EAEN,EAAK/C,MAA5BC,EAF6B,EAE7BA,SAAUC,EAFmB,EAEnBA,SAFmB,SAI/BA,EAAS2B,QAAQkC,2BAA2Bd,KAAK,CAACC,KAAMjD,EAAS,KAJlC,2C,wDAOvCwC,8B,uCAAgC,WAAOH,GAAP,iBAAAjD,EAAA,6DACtBa,EAAa,EAAKF,MAAlBE,SADsB,SAECA,EAAS2B,QAAQG,eAAeD,OAFjC,OAExBsB,EAFwB,OAG9B,EAAK5B,SAAS,CAAEnB,UAAW+C,IAHG,2C,wDAMhCW,6B,uCAA+B,WAAM1B,GAAN,qBAAAjD,EAAA,6DAC7BiD,EAAMS,iBADuB,EAEE,EAAK/C,MAA5BC,EAFqB,EAErBA,SAAUC,EAFW,EAEXA,SACZ+D,EAAW,EAAKjE,MAAMO,aAHC,SAKvBL,EAAS2B,QAAQqC,iBAAiBD,GAAUhB,KAAK,CAACC,KAAMjD,EAAS,KAL1C,2C,wDAQ/B4C,gC,sBAAkC,8BAAAxD,EAAA,sDACxBe,EAAa,EAAKJ,MAAlBI,SACF+D,EAAchC,SAAS/B,GAAY,EACzC,EAAKqB,SAAS,CAAErB,SAAU+B,SAASgC,KAHH,2C,EAMlCC,uC,uCAAyC,WAAM9B,GAAN,mBAAAjD,EAAA,6DACvCiD,EAAMS,iBADiC,EAER,EAAK/C,MAA5BC,EAF+B,EAE/BA,SAAUC,EAFqB,EAErBA,SAFqB,SAIjCA,EAAS2B,QAAQwC,6BAA6BpB,KAAK,CAACC,KAAMjD,EAAS,KAJlC,2C,wDAOzCsC,2B,uCAA6B,WAAOD,GAAP,iBAAAjD,EAAA,sDACnBgB,EAAc,EAAKL,MAAnBK,WACFiE,EAAmBjE,GACRkE,KAAKjC,EAAMgB,aAAa,IACzC,EAAK7B,SAAS,CAAEpB,UAAWiE,IAJA,2C,wDAO7BE,4B,uCAA8B,WAAMlC,GAAN,qBAAAjD,EAAA,6DAC5BiD,EAAMS,iBADsB,EAEG,EAAK/C,MAA5BC,EAFoB,EAEpBA,SAAUC,EAFU,EAEVA,SACZqB,EAAU,EAAKvB,MAAMQ,YAHC,SAK1B,EAAKiB,SAAS,CAAEd,UAAW,OALD,SAMpBT,EAAS2B,QAAQ4C,eAAelD,GAAS0B,KAAK,CAACC,KAAMjD,EAAS,KAN1C,uDAQ1BP,QAAQkC,MAAM,KAAM+B,SACpB,EAAKlC,SAAS,CAAEd,UAAW,KAAMgD,UATP,yD,kGAa9B,WAAU,IAAD,OACP,EAAyEe,KAAK1E,MAAtEC,EAAR,EAAQA,SAAUI,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,UAAWH,EAAxC,EAAwCA,kBAAmBQ,EAA3D,EAA2DA,UAC3D,OAAK+D,KAAK1E,MAAMT,KAId,yBAAKoF,UAAU,OACb,6BACI,wBAAIA,UAAU,eAAd,iBACA,6BACA,8BAGF,WACA,OAAQ,EAAK3E,MAAMI,UACjB,KAAK,EACH,OACE,6BACE,kDACA,yBAAKwE,MAAO,CAACC,QAAS,OAAQC,eAAgB,WAC5C,kBAACC,EAAA,EAAD,CAAMH,MAAO,CAAEI,MAAO,UACpB,kBAACD,EAAA,EAAKE,OAAN,KAAa,sDACb,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACC,EAAA,EAAD,CAAWC,QAAQ,SACjB,kBAACD,EAAA,EAAUE,KAAX,KACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACkB,OAAdpF,GAAsBA,EAAUqF,KAAI,SAACrG,GAAD,OAAO,4BAAI,4BAAKA,cAQpE,6BACA,yBAAKuF,MAAO,CAACC,QAAS,OAAQC,eAAgB,WAC5C,kBAACC,EAAA,EAAD,CAAMH,MAAO,CAAEI,MAAO,UACpB,kBAACD,EAAA,EAAKE,OAAN,KAAa,yDACb,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACS,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,QAAN,CAAcC,YAAY,gBAAgBC,UAAWC,QAAQrF,GAAYsF,SAAU,SAAAC,GAAC,OAAI,EAAKzE,SAAS,CAAEjB,YAAa0F,EAAEC,OAAOC,MAAOzF,UAAW,QAAS0F,KAAK,SAC9J,kBAACV,EAAA,EAAKE,QAAQS,SAAd,CAAuBD,KAAK,WAAW1F,GACvC,kBAACgF,EAAA,EAAKY,MAAN,CAAY3B,MAAO,CAAC4B,MAAO,SAA3B,MACA,kBAACb,EAAA,EAAKE,QAAN,CAAcY,aAAc,UAAWC,GAAG,SAASX,UAAWC,QAAQrF,GAAYsF,SAAU,SAAAC,GAAC,OAAI,EAAKzE,SAAS,CAAEjB,YAAa0F,EAAEC,OAAOC,MAAOzF,UAAW,SACvJ,4BAAQyF,MAAM,UAAUO,UAAQ,EAACC,QAAM,GAAvC,kBAEe,OAAb3G,GAAqBA,EAASyF,KAAI,SAACrG,GAAD,OAAO,4BAAQ+G,MAAO/G,GAAIA,OAEhE,6BACA,kBAACwH,EAAA,EAAD,CAAQC,QAAS,EAAKtC,6BAAtB,kBAMV,6BACE,EAAKxE,MAAMU,QAAUT,EAAS,IAAO,kBAAC4G,EAAA,EAAD,CAAQC,QAAS,EAAK1C,wCAAtB,iCAG7C,KAAK,EACH,OACE,6BACE,8DACA,yBAAKQ,MAAO,CAACC,QAAS,OAAQC,eAAgB,WAC5C,kBAACC,EAAA,EAAD,CAAMH,MAAO,CAAEI,MAAO,UACpB,kBAACD,EAAA,EAAKE,OAAN,KAAa,8CACb,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACC,EAAA,EAAD,CAAWC,QAAQ,SACjB,kBAACD,EAAA,EAAUE,KAAX,KACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,qCACA,0CAGJ,+BACkB,OAAdnF,GAAsBA,EAAUoF,KAAI,SAACqB,EAAKC,GAAN,OAClC,4BACE,4BAAKA,GACL,4BAAKD,EAAIE,wBAW7B,6BACA,yBAAKrC,MAAO,CAACC,QAAS,OAAQC,eAAgB,WAC5C,kBAACC,EAAA,EAAD,CAAMH,MAAO,CAAEI,MAAO,UACpB,kBAACD,EAAA,EAAKE,OAAN,KAAa,iDACb,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACS,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,QAAN,CAAcO,MAAO,EAAKpG,MAAMO,aAAc0F,SAAU,SAAAC,GAAC,OAAI,EAAKzE,SAAS,CAAElB,aAAc2F,EAAEC,OAAOC,SAAUC,KAAK,SACnH,6BACA,kBAACQ,EAAA,EAAD,CAAQC,QAAS,EAAK9C,8BAAtB,YAKR,6BACE,EAAKhE,MAAMU,QAAUT,EAAS,IAAO,kBAAC4G,EAAA,EAAD,CAAQC,QAAS,EAAKhD,sCAAtB,+BAG7C,KAAK,EACH,OACE,6BACE,4DACE,EAAK9D,MAAMU,QAAUT,EAAS,IAAO,kBAAC4G,EAAA,EAAD,CAAQC,QAAS,EAAKlD,gCAAtB,yBAG7C,KAAK,EACH,OACE,6BACE,sDACA,yBAAKgB,MAAO,CAACC,QAAS,OAAQC,eAAgB,WAC5C,kBAACC,EAAA,EAAD,CAAMH,MAAO,CAAEI,MAAO,UACpB,kBAACD,EAAA,EAAKE,OAAN,KAAa,8CACb,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACC,EAAA,EAAD,CAAWC,QAAQ,SACjB,kBAACD,EAAA,EAAUE,KAAX,KACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,qCACA,wCACA,uCAGJ,+BACkB,OAAdnF,GAAsBA,EAAUoF,KAAI,SAACqB,EAAKC,GAAN,OAClC,4BACE,4BAAKA,GACL,4BAAKD,EAAIE,aACT,4BAAKF,EAAIxD,sBAW7B,6BACA,yBAAKqB,MAAO,CAACC,QAAS,OAAQC,eAAgB,WAC5C,kBAACC,EAAA,EAAD,CAAMH,MAAO,CAAEI,MAAO,UACpB,kBAACD,EAAA,EAAKE,OAAN,KAAa,kDACb,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACS,EAAA,EAAKC,MAAN,KACE,kBAACD,EAAA,EAAKE,QAAN,CAAcY,aAAc,UAAWC,GAAG,SAASX,UAAWC,QAAQrF,GAAYsF,SAAU,SAAAC,GAAC,OAAI,EAAKzE,SAAS,CAAEhB,SAAUyF,EAAEC,OAAOC,MAAOzF,UAAW,SACpJ,4BAAQyF,MAAM,UAAUO,UAAQ,EAACC,QAAM,GAAvC,mBACgB,OAAdtG,GAAsBA,EAAUoF,KAAI,SAACqB,EAAKC,GAAN,OAAgB,4BAAQZ,MAAOY,GAAQD,EAAIE,iBAEnF,kBAACtB,EAAA,EAAKE,QAAQS,SAAd,CAAuBD,KAAK,WAAW1F,GACvC,6BACA,kBAACkG,EAAA,EAAD,CAAQC,QAAS,EAAKtD,0BAAtB,YAKR,6BACE,EAAKxD,MAAMU,QAAUT,EAAS,IAAO,kBAAC4G,EAAA,EAAD,CAAQC,QAAS,EAAK3D,8BAAtB,uBAG7C,KAAK,EACH,OACE,6BACE,2CACA,6BACE,EAAKnD,MAAMU,QAAUT,EAAS,IAAO,kBAAC4G,EAAA,EAAD,CAAQC,QAAS,EAAKhE,wBAAtB,gBAG7C,KAAK,EACH,OACE,6BACE,6CACA,yBAAK8B,MAAO,CAACC,QAAS,OAAQC,eAAgB,WAC5C,kBAACC,EAAA,EAAD,CAAMH,MAAO,CAAEI,MAAO,UACpB,kBAACD,EAAA,EAAKE,OAAN,KAAa,2CACb,kBAACF,EAAA,EAAKG,KAAN,KACE,4BAAK5E,EAAUH,GAAmB8G,gBAIxC,6BACA,yBAAKrC,MAAO,CAACC,QAAS,OAAQC,eAAgB,WAC5C,kBAACC,EAAA,EAAD,CAAMH,MAAO,CAAEI,MAAO,UACpB,kBAACD,EAAA,EAAKE,OAAN,KAAa,4CACb,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACC,EAAA,EAAD,CAAWC,QAAQ,SACjB,kBAACD,EAAA,EAAUE,KAAX,KACE,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,qCACA,wCACA,uCAGJ,+BACkB,OAAdnF,GAAsBA,EAAUoF,KAAI,SAACqB,EAAKC,GAAN,OAClC,4BACE,4BAAKA,GACL,4BAAKD,EAAIE,aACT,4BAAKF,EAAIxD,uBAanC,QACA,OACE,6BACE,yDAvNN,IAVG,4E,GA/JK2D,cCKElB,QACW,cAA7B7G,OAAOgI,SAASC,UAEe,UAA7BjI,OAAOgI,SAASC,UAEhBjI,OAAOgI,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.efd24466.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import \"./App.css\";\nimport getWeb3 from \"./getWeb3\";\nimport React, { Component } from \"react\";\nimport VotingContract from \"./contracts/Voting.json\";\nimport { Button, Card, ListGroup, Table, Form } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nclass App extends Component {\n  state = {\n    web3: null,\n    accounts: null,\n    contract: null,\n    winningProposalId: null,\n    workflow: 0,\n    whitelist: [],\n    proposals: [],\n    formProposal: null,\n    formAddress: null,\n    formVote: null,\n    owner: null,\n    formError: null\n  };\n\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = VotingContract.networks[networkId];\n\n      const contract = new web3.eth.Contract(\n        VotingContract.abi,\n        deployedNetwork && deployedNetwork.address,\n      );\n\n      window.ethereum.on(\"accountsChanged\", async () => {\n        const accounts = await web3.eth.getAccounts();\n        this.setState({accounts});\n      });\n\n      this.setState({ web3, accounts, contract }, this.runInit);\n    } catch (error) {\n      alert(`Failed to load web3, accounts, or contract. Check console for details.`);\n      console.error(error);\n    }\n  };\n\n  runInit = async() => {\n    const { contract } = this.state;\n\n    const whitelist = await contract.methods.getAddresses().call();\n    const proposals = await contract.methods.getProposals().call();\n    const workflow = await contract.methods.getWorkflow().call();\n    const winningProposalId = await contract.methods.getWinningProposalId().call();\n    const owner = await contract.methods.owner().call();\n\n    this.setState({whitelist, workflow: parseInt(workflow), winningProposalId, owner, proposals });\n\n    contract.events.VoterRegistered().on('data', (event) => this.handleEventVoterRegistered(event)).on('error', console.error);\n    contract.events.ProposalRegistered().on('data', (event) => this.handleEventProposalRegistered(event)).on('error', console.error);\n    contract.events.Voted().on('data', (event) => this.handleEventVoted(event)).on('error', console.error);\n    contract.events.WorkflowStatusChange().on('data', (event) => this.handleEventWorkflowStatusChange(event)).on('error', console.error);\n  };\n\n  handleSubmitTallyVotes = async(event) => {\n    event.preventDefault();\n    const { accounts, contract } = this.state;\n    const winningProposalId = await contract.methods.getWinningProposalId().call();\n\n    this.setState({ winningProposalId });\n    await contract.methods.tallyVotes().send({from: accounts[0]});\n  }\n\n  handleSubmitEndVotingSession = async(event) => {\n    event.preventDefault();\n    const { accounts, contract } = this.state;\n\n    await contract.methods.endVotingSession().send({from: accounts[0]});\n  }\n\n  handleEventVoted = async (event) => {\n    const { proposals } = this.state;\n    const updatedProposals = proposals;\n    updatedProposals[event.returnValues[1]].voteCount = parseInt(updatedProposals[event.returnValues[1]].voteCount) + 1;\n\n    this.setState({ proposals: updatedProposals });\n  }\n\n  handleSubmitRegisterVote = async (event) => {\n    event.preventDefault();\n    const { accounts, contract } = this.state;\n    const vote = parseInt(this.state.formVote);\n\n    try {\n      this.setState({ formError: null });\n      await contract.methods.registerVote(vote).send({from: accounts[0]});\n    } catch (error) {\n      console.error(error.message);\n      this.setState({ formError: error.message });\n    }\n  }\n\n  handleSubmitStartVotingSession = async (event) => {\n    event.preventDefault();\n    const { accounts, contract } = this.state;\n\n    await contract.methods.startVotingSession().send({from: accounts[0]});\n  }\n\n  handleSubmitEndProposalsRegistration = async(event) => {\n    event.preventDefault();\n    const { accounts, contract } = this.state;\n\n    await contract.methods.endProposalsRegistration().send({from: accounts[0]});\n  }\n\n  handleEventProposalRegistered = async (event) => {\n    const { contract } = this.state;\n    const updatedProposals = await contract.methods.getProposals().call();\n    this.setState({ proposals: updatedProposals });\n  }\n\n  handleSubmitRegisterProposal = async(event) => {\n    event.preventDefault();\n    const { accounts, contract } = this.state;\n    const proposal = this.state.formProposal;\n\n    await contract.methods.registerProposal(proposal).send({from: accounts[0]});\n  }\n\n  handleEventWorkflowStatusChange = async () => {\n    const { workflow } = this.state;\n    const newWorkflow = parseInt(workflow) + 1;\n    this.setState({ workflow: parseInt(newWorkflow) });\n  }\n\n  handleSubmitStartProposalsRegistration = async(event) => {\n    event.preventDefault();\n    const { accounts, contract } = this.state;\n\n    await contract.methods.startProposalsRegistration().send({from: accounts[0]});\n  }\n\n  handleEventVoterRegistered = async (event) => {\n    const { whitelist } = this.state;\n    const updatedWhitelist = whitelist;\n    updatedWhitelist.push(event.returnValues[0]);\n    this.setState({ whitelist: updatedWhitelist });\n  }\n\n  handleSubmitVoterRegistered = async(event) => {\n    event.preventDefault();\n    const { accounts, contract } = this.state;\n    const address = this.state.formAddress;\n    try {\n      this.setState({ formError: null });\n      await contract.methods.addToWhitelist(address).send({from: accounts[0]});\n    } catch (error) {\n      console.error(error.message);\n      this.setState({ formError: error.message });\n    }\n  }\n\n  render() {\n    const { accounts, whitelist, proposals, winningProposalId, formError } = this.state;\n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n    return (\n      <div className=\"App\">\n        <div>\n            <h1 className=\"text-center\">Voting System</h1>\n            <hr></hr>\n            <br></br>\n        </div>\n\n        {(() => {\n          switch (this.state.workflow) {\n            case 0:\n              return (\n                <div>\n                  <h2>Registering Voters</h2>\n                  <div style={{display: 'flex', justifyContent: 'center'}}>\n                    <Card style={{ width: '50rem' }}>\n                      <Card.Header><strong>Registered voters</strong></Card.Header>\n                      <Card.Body>\n                        <ListGroup variant=\"flush\">\n                          <ListGroup.Item>\n                            <Table striped bordered hover>\n                              <tbody>\n                                { whitelist !== null && whitelist.map((a) => <tr><td>{a}</td></tr>) }\n                              </tbody>\n                            </Table>\n                          </ListGroup.Item>\n                        </ListGroup>\n                      </Card.Body>\n                    </Card>\n                  </div>\n                  <br></br>\n                  <div style={{display: 'flex', justifyContent: 'center'}}>\n                    <Card style={{ width: '50rem' }}>\n                      <Card.Header><strong>Authorize new voters</strong></Card.Header>\n                      <Card.Body>\n                        <Form>\n                          <Form.Group>\n                            <Form.Control placeholder=\"Enter Address\" isInvalid={Boolean(formError)} onChange={e => this.setState({ formAddress: e.target.value, formError: null })} type=\"text\" />\n                            <Form.Control.Feedback type=\"invalid\">{formError}</Form.Control.Feedback>\n                            <Form.Label style={{float: 'left'}}>Or</Form.Label>\n                            <Form.Control defaultValue={'Default'} as=\"select\" isInvalid={Boolean(formError)} onChange={e => this.setState({ formAddress: e.target.value, formError: null })}>\n                              <option value=\"Default\" disabled hidden>Select Address</option>\n                              {/* get all connected accounts ? */}\n                              { accounts !== null && accounts.map((a) => <option value={a}>{a}</option>) }\n                            </Form.Control>\n                            <br/>\n                            <Button onClick={this.handleSubmitVoterRegistered}>Authorize</Button>\n                          </Form.Group>\n                        </Form>\n                      </Card.Body>\n                    </Card>\n                    </div>\n                  <br></br>\n                  {(this.state.owner === accounts[0]) && <Button onClick={this.handleSubmitStartProposalsRegistration}>Start Proposals Registration</Button>}\n                </div>\n              )\n            case 1:\n              return (\n                <div>\n                  <h2>Proposals Registration Started</h2>\n                  <div style={{display: 'flex', justifyContent: 'center'}}>\n                    <Card style={{ width: '50rem' }}>\n                      <Card.Header><strong>Proposals</strong></Card.Header>\n                      <Card.Body>\n                        <ListGroup variant=\"flush\">\n                          <ListGroup.Item>\n                            <Table striped bordered hover>\n                              <thead>\n                                <tr>\n                                  <th>index</th>\n                                  <th>proposal</th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                { proposals !== null && proposals.map((key, index) =>\n                                    <tr>\n                                      <td>{index}</td>\n                                      <td>{key.description}</td>\n                                    </tr>\n                                  )\n                                }\n                              </tbody>\n                            </Table>\n                          </ListGroup.Item>\n                        </ListGroup>\n                      </Card.Body>\n                    </Card>\n                  </div>\n                  <br></br>\n                  <div style={{display: 'flex', justifyContent: 'center'}}>\n                    <Card style={{ width: '50rem' }}>\n                      <Card.Header><strong>Add proposal</strong></Card.Header>\n                      <Card.Body>\n                        <Form.Group>\n                          <Form.Control value={this.state.formProposal} onChange={e => this.setState({ formProposal: e.target.value })} type=\"text\" />\n                          <br/>\n                          <Button onClick={this.handleSubmitRegisterProposal}>Send</Button>\n                        </Form.Group>\n                      </Card.Body>\n                    </Card>\n                  </div>\n                  <br></br>\n                  {(this.state.owner === accounts[0]) && <Button onClick={this.handleSubmitEndProposalsRegistration}>End Proposals Registration</Button>}\n                </div>\n              )\n            case 2:\n              return (\n                <div>\n                  <h2>Proposals Registration Ended</h2>\n                  {(this.state.owner === accounts[0]) && <Button onClick={this.handleSubmitStartVotingSession}>Start Voting Session</Button>}\n                </div>\n              )\n            case 3:\n              return (\n                <div>\n                  <h2>Voting Session Started</h2>\n                  <div style={{display: 'flex', justifyContent: 'center'}}>\n                    <Card style={{ width: '50rem' }}>\n                      <Card.Header><strong>Proposals</strong></Card.Header>\n                      <Card.Body>\n                        <ListGroup variant=\"flush\">\n                          <ListGroup.Item>\n                            <Table striped bordered hover>\n                              <thead>\n                                <tr>\n                                  <th>index</th>\n                                  <th>proposal</th>\n                                  <th>votes</th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                { proposals !== null && proposals.map((key, index) =>\n                                    <tr>\n                                      <td>{index}</td>\n                                      <td>{key.description}</td>\n                                      <td>{key.voteCount}</td>\n                                    </tr>\n                                  )\n                                }\n                              </tbody>\n                            </Table>\n                          </ListGroup.Item>\n                        </ListGroup>\n                      </Card.Body>\n                    </Card>\n                  </div>\n                  <br></br>\n                  <div style={{display: 'flex', justifyContent: 'center'}}>\n                    <Card style={{ width: '50rem' }}>\n                      <Card.Header><strong>Register Vote</strong></Card.Header>\n                      <Card.Body>\n                        <Form.Group>\n                          <Form.Control defaultValue={'Default'} as=\"select\" isInvalid={Boolean(formError)} onChange={e => this.setState({ formVote: e.target.value, formError: null })}>\n                            <option value=\"Default\" disabled hidden>Select Proposal</option>\n                            { proposals !== null && proposals.map((key, index) => <option value={index}>{key.description}</option>) }\n                          </Form.Control>\n                          <Form.Control.Feedback type=\"invalid\">{formError}</Form.Control.Feedback>\n                          <br/>\n                          <Button onClick={this.handleSubmitRegisterVote}>Send</Button>\n                        </Form.Group>\n                      </Card.Body>\n                    </Card>\n                  </div>\n                  <br></br>\n                  {(this.state.owner === accounts[0]) && <Button onClick={this.handleSubmitEndVotingSession}>End Voting Session</Button>}\n                </div>\n              )\n            case 4:\n              return (\n                <div>\n                  <h2>Tally Votes</h2>\n                  <br></br>\n                  {(this.state.owner === accounts[0]) && <Button onClick={this.handleSubmitTallyVotes}>See results</Button>}\n                </div>\n              )\n            case 5:\n              return (\n                <div>\n                  <h2>Votes Tallied</h2>\n                  <div style={{display: 'flex', justifyContent: 'center'}}>\n                    <Card style={{ width: '50rem' }}>\n                      <Card.Header><strong>Winner</strong></Card.Header>\n                      <Card.Body>\n                        <h3>{proposals[winningProposalId].description}</h3>\n                      </Card.Body>\n                    </Card>\n                  </div>\n                  <br></br>\n                  <div style={{display: 'flex', justifyContent: 'center'}}>\n                    <Card style={{ width: '50rem' }}>\n                      <Card.Header><strong>Results</strong></Card.Header>\n                      <Card.Body>\n                        <ListGroup variant=\"flush\">\n                          <ListGroup.Item>\n                            <Table striped bordered hover>\n                              <thead>\n                                <tr>\n                                  <th>index</th>\n                                  <th>proposal</th>\n                                  <th>votes</th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                { proposals !== null && proposals.map((key, index) =>\n                                    <tr>\n                                      <td>{index}</td>\n                                      <td>{key.description}</td>\n                                      <td>{key.voteCount}</td>\n                                    </tr>\n                                  )\n                                }\n                              </tbody>\n                            </Table>\n                          </ListGroup.Item>\n                        </ListGroup>\n                      </Card.Body>\n                    </Card>\n                  </div>\n                </div>\n              )\n            default :\n            return (\n              <div>\n                <h2>404: Nothing to do here</h2>\n              </div>\n            )\n          }\n        })()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}